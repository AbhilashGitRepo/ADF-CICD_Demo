{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AZ-Trn-ADFactory-1"
		},
		"sv_practice_ADLS_G2_linkService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'sv_practice_ADLS_G2_linkService'"
		},
		"sv_training_ALDS_G2_linkservice_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'sv_training_ALDS_G2_linkservice'"
		},
		"ADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://perlovskybugbash.dfs.core.windows.net"
		},
		"AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://daperlov-dev.vault.azure.net/"
		},
		"SQLDB_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sqldbconnection"
		},
		"SV_training_ADLS_G2_linkService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://trn1adls1gen2storage.dfs.core.windows.net"
		},
		"sv_practice_ADLS_G2_linkService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://prac1storage1gen2.dfs.core.windows.net"
		},
		"sv_training_ALDS_G2_linkservice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://training1storage1gen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CICDDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 20
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSCDType2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Using byNames to fully parameterize a Slowly Change Dimension Type 2 patter",
				"activities": [
					{
						"name": "GenericSCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GenericSCDType2",
								"type": "DataFlowReference",
								"parameters": {
									"PrimaryKey": {
										"value": "'@{pipeline().parameters.PrimaryKey}'",
										"type": "Expression"
									},
									"Columns": {
										"value": "'@{pipeline().parameters.ColumnNames}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"GenericInput": {
										"Folder": {
											"value": "@pipeline().parameters.IncomingDimensionFolder",
											"type": "Expression"
										}
									},
									"ExistingDimensionTable": {
										"Table": {
											"value": "@pipeline().parameters.DimensionTable",
											"type": "Expression"
										}
									},
									"DimensionTableSink": {
										"Table": {
											"value": "@pipeline().parameters.DimensionTable",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"IncomingDimensionFolder": {
						"type": "string"
					},
					"DimensionTable": {
						"type": "string"
					},
					"PrimaryKey": {
						"type": "string"
					},
					"ColumnNames": {
						"type": "string"
					}
				},
				"folder": {
					"name": "GenericSCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-12T17:56:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GenericSCDType2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_lake1_to_lake2_pipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "dev/retail_data_json/*",
									"wildcardFileName": "cust*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "parameterized_csv_dataset",
								"type": "DatasetReference",
								"parameters": {
									"file_sys_name": {
										"value": "@{pipeline().parameters.src_file_sys_name}",
										"type": "Expression"
									},
									"file_path": {
										"value": "@{pipeline().parameters.src_file_path}",
										"type": "Expression"
									},
									"file_name": {
										"value": "@{pipeline().parameters.src_file_name}",
										"type": "Expression"
									},
									"delimiter": {
										"value": "@pipeline().parameters.src_delimiter",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "target_csv_cust_dataset",
								"type": "DatasetReference",
								"parameters": {
									"file_sys_name": {
										"value": "@pipeline().parameters.trgt_file_sys_name",
										"type": "Expression"
									},
									"file_name": {
										"value": "@pipeline().parameters.trgt_file_name",
										"type": "Expression"
									},
									"file_path": {
										"value": "@pipeline().parameters.trgt_file_path",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"src_file_name": {
						"type": "string"
					},
					"trgt_file_name": {
						"type": "string"
					},
					"src_file_path": {
						"type": "string"
					},
					"trgt_file_path": {
						"type": "string"
					},
					"src_file_sys_name": {
						"type": "string"
					},
					"trgt_file_sys_name": {
						"type": "string"
					},
					"src_delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-06-22T05:58:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parameterized_csv_dataset')]",
				"[concat(variables('factoryId'), '/datasets/target_csv_cust_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "execute_1_nb_activity",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/test-bricks",
							"baseParameters": {
								"datafactory_name": "AZ-Trn-ADFactory-1"
							}
						},
						"linkedServiceName": {
							"referenceName": "AZ_Trn_DF_to_DB_linkService",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": [
					"tast_1_pipe"
				],
				"lastPublishTime": "2021-05-01T04:09:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZ_Trn_DF_to_DB_linkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "execute_1_nb_activity",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/test-bricks",
							"baseParameters": {
								"datafactory_name": {
									"value": "@pipeline().parameters.adf_pipe_name",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AZ_Trn_DF_to_DB_linkService",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"adf_pipe_name": {
						"type": "string"
					}
				},
				"annotations": [
					"tast_1_pipe"
				],
				"lastPublishTime": "2021-05-01T04:09:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZ_Trn_DF_to_DB_linkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline3_runUrl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "execute_1_nb_activity",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/test-2-exec"
						},
						"linkedServiceName": {
							"referenceName": "AZ_Trn_DF_to_DB_linkService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "copy_run_url",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "execute_1_nb_activity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/test-2-runPageUrl",
							"baseParameters": {
								"run_url_is": {
									"value": "@{activity('execute_1_nb_activity').output}",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AZ_Trn_DF_to_DB_linkService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "execute_1_nb_activity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "If Condition run output greater",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "copy_run_url",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('copy_run_url').output.runOutput.rowsInserted, 30)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WaitFor_10Sec",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "If Condition run output greater",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "WaitFor_5sec",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "If Condition run output greater",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"annotations": [
					"tast_1_pipe"
				],
				"lastPublishTime": "2021-05-01T21:38:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AZ_Trn_DF_to_DB_linkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SCD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlDimension')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_practice_ADLS_G2_linkService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customers_some_data.csv",
						"folderPath": "dev/retail_data_json/customers/",
						"fileSystem": "practice"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_practice_ADLS_G2_linkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameterized_csv_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_practice_ADLS_G2_linkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_sys_name": {
						"type": "string"
					},
					"file_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"delimiter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().file_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().file_sys_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_practice_ADLS_G2_linkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_retail_json_adls_g2_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_practice_ADLS_G2_linkService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_sys": {
						"type": "string"
					},
					"file_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().file_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().file_sys",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_practice_ADLS_G2_linkService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_csv_cust_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_training_ALDS_G2_linkservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_sys_name": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"file_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().file_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().file_sys_name",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_training_ALDS_G2_linkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_customer_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_training_ALDS_G2_linkservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dev2",
						"fileSystem": "training"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_training_ALDS_G2_linkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_retail_json_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_training_ALDS_G2_linkservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_sys": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"file_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().file_path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().file_sys",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_training_ALDS_G2_linkservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "blobconnectionstring"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_Trn_DF_to_DB_linkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-6344568242703238.18.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/8085115e-2321-4323-bb6e-5f45d869d738/resourceGroups/AZ_Trn_ResourceGroup/providers/Microsoft.Databricks/workspaces/AZ-Trn-Free-WorkSpace",
					"existingClusterId": "0429-215422-faxes442"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('SQLDB_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SV_training_ADLS_G2_linkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('SV_training_ADLS_G2_linkService_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sv_practice_ADLS_G2_linkService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sv_practice_ADLS_G2_linkService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('sv_practice_ADLS_G2_linkService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sv_training_ALDS_G2_linkservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sv_training_ALDS_G2_linkservice_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('sv_training_ALDS_G2_linkservice_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GenericSCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GenericDataset",
								"type": "DatasetReference"
							},
							"name": "GenericInput"
						},
						{
							"dataset": {
								"referenceName": "SqlDimension",
								"type": "DatasetReference"
							},
							"name": "ExistingDimensionTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlDimension",
								"type": "DatasetReference"
							},
							"name": "DimensionTableSink"
						}
					],
					"transformations": [
						{
							"name": "NewAndUpdatedRows"
						},
						{
							"name": "AddHashInput"
						},
						{
							"name": "AddHashExisting"
						},
						{
							"name": "GetMaxSurrogateKey"
						},
						{
							"name": "AddKey"
						},
						{
							"name": "JoinWithMaxSurrogateKey"
						},
						{
							"name": "AddDimensionColumns"
						},
						{
							"name": "FilterForUpdatedValues"
						},
						{
							"name": "UpdateObsolete"
						},
						{
							"name": "DropUnwantedColsInput"
						},
						{
							"name": "UnionAllData"
						},
						{
							"name": "MarkAsUpdate"
						},
						{
							"name": "DropUnwantedColumns"
						},
						{
							"name": "MarkAsInsert"
						},
						{
							"name": "FilterForActive"
						}
					],
					"script": "parameters{\n\tPrimaryKey as string ('ID'),\n\tColumns as string ('Player,Team,Salary')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> GenericInput\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingDimensionTable\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewAndUpdatedRows\nGenericInput derive(id_hash = md5(byName($PrimaryKey)),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashInput\nFilterForActive derive(id_hash = md5(byNames(split($PrimaryKey,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashExisting\nAddHashExisting aggregate(MaxSurrogateKey = max(toInteger(byName('Key')))) ~> GetMaxSurrogateKey\nNewAndUpdatedRows keyGenerate(output(Key as long),\n\tstartAt: 1L) ~> AddKey\nAddKey, GetMaxSurrogateKey join(Key == MaxSurrogateKey || true(),\n\tjoinType:'cross',\n\tbroadcast: 'right')~> JoinWithMaxSurrogateKey\nJoinWithMaxSurrogateKey derive(Key = Key + MaxSurrogateKey,\n\t\tActive = 1,\n\t\tActiveStartTime = currentUTC(),\n\t\tActiveEndTime = toTimestamp(toString(null()))) ~> AddDimensionColumns\nAddHashExisting, NewAndUpdatedRows exists(AddHashExisting@id_hash == AddHashInput@id_hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> FilterForUpdatedValues\nFilterForUpdatedValues derive(Active = 0,\n\t\tActiveEndTime = currentUTC()) ~> UpdateObsolete\nAddDimensionColumns select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColsInput\nMarkAsInsert, DropUnwantedColumns union(byName: true)~> UnionAllData\nUpdateObsolete alterRow(updateIf(true())) ~> MarkAsUpdate\nMarkAsUpdate select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nDropUnwantedColsInput alterRow(insertIf(true())) ~> MarkAsInsert\nExistingDimensionTable filter(toInteger(byName('Active')) == 1) ~> FilterForActive\nUnionAllData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($PrimaryKey)],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DimensionTableSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericDataset')]",
				"[concat(variables('factoryId'), '/datasets/SqlDimension')]"
			]
		}
	]
}